name: GLPI Agent Packaging

# Set publish_development_build to "yes" to publish development builds as pre-release
# Set number_of_development_build_to_keep to the number of development build to keep
# Set number_of_nightly_build_to_keep to the number of nightly release to keep
# Set number_of_nightly_build_to_keep to 0 to not publish nightly builds
env:
  publish_development_build: no
  number_of_development_build_to_keep: 3
  number_of_nightly_build_to_keep: 3

on:
  push:
  pull_request:
    branches:
      - develop
  schedule:
    - cron: '20 3 * * *'

jobs:
  setup-release:

    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.set-version.outputs.version }}
      upload_url: ${{ steps.create-tagged-release.outputs.upload_url }}
      create-release: ${{ steps.set-version.outputs.create-release }}
      tag_name: ${{ steps.set-version.outputs.tag_name }}
      build: ${{ steps.set-version.outputs.build }}
      releaseid: ${{ steps.create-tagged-release.outputs.id }}

    steps:
    - uses: actions/checkout@v2
    - name: Set version
      id: set-version
      run: |
        if [ -z "${GITHUB_REF#*refs/tags/*}" ]; then
            VERSION="${GITHUB_REF#*refs/tags/}"
            echo "New release on $VERSION $tag"
            echo "::set-output name=create-release::yes"
            echo "::set-output name=build::yes"
            echo "::set-output name=tag_name::$VERSION"
        else
            VERSION=$(perl -Ilib -MFusionInventory::Agent::Version -e 'print $FusionInventory::Agent::Version::VERSION')
            VERSION=${VERSION%-dev}-git${GITHUB_SHA:0:8}
            if [ "${{ github.event_name }}" = "schedule" -o "${{ env.publish_development_build }}" = "yes" ]; then
                if [ "${{ github.event_name }}" = "schedule" ]; then
                    TYPE=nightly
                else
                    TYPE=development
                fi
                SKIP_NIGHTLY="${{ env.number_of_nightly_build_to_keep }} $TYPE"
                # For nightly, we also check if we had any commit during the last 24 hours
                if [ "$SKIP_NIGHTLY" = "0 nightly" -o -z "$( git rev-list -n 1 --after="24 hours" ${{ github.sha }} )" ]; then
                    echo "No nightly release needed"
                    echo "::set-output name=create-release::no"
                    echo "::set-output name=build::no"
                else
                    TS=$(date +%F-%H-%M-%S)
                    echo "New $TYPE release as $VERSION version"
                    echo "::set-output name=create-release::${{ env.publish_development_build }}"
                    echo "::set-output name=build::yes"
                    echo "::set-output name=tag_name::$TYPE-release-$TS"
                fi
            else
                echo "Just building $VERSION version"
                echo "::set-output name=create-release::no"
                echo "::set-output name=build::yes"
            fi
        fi
        echo "::set-output name=version::$VERSION"
        case "${VERSION#*-}" in
            $VERSION)
                echo "::set-output name=revname::v$VERSION"
                echo "::set-output name=prerelease::false"
                ;;
            test*)
                echo "::set-output name=revname::v${VERSION%-test*} Test release ${VERSION#*-test}"
                echo "::set-output name=prerelease::true"
                ;;
            beta*)
                echo "::set-output name=revname::v${VERSION%-beta*} Beta release ${VERSION#*-beta}"
                echo "::set-output name=prerelease::true"
                ;;
            *)
                echo "::set-output name=revname::v$VERSION Development release"
                echo "::set-output name=prerelease::true"
                ;;
        esac
      shell: bash
    - name: Generate release description
      id: github-release-body
      if: ${{ steps.set-version.outputs.create-release == 'yes' }}
      run: |
        tools/github-release-description.sh --version ${{ steps.set-version.outputs.version }} --tag ${{ steps.set-version.outputs.tag_name }}
      shell: bash
    - name: Create Tagged Release
      id: create-tagged-release
      uses: actions/create-release@v1
      if: ${{ steps.set-version.outputs.create-release == 'yes' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.set-version.outputs.tag_name }}
        release_name: GLPI Agent ${{ steps.set-version.outputs.revname }}
        body_path: release-description.md
        draft: true
        prerelease: ${{ steps.set-version.outputs.prerelease }}

  windows-packaging:

    runs-on: windows-latest
    strategy:
      matrix:
        arch: [ x64, x86 ]

    if: ${{ needs.setup-release.outputs.build == 'yes' }}
    needs: setup-release

    steps:
    - uses: actions/checkout@v2
    - name: Create folder for cached datas
      run: |
        mkdir C:\Strawberry-perl-for-GLPI-Agent_build\restore
      shell: cmd
    - name: Restore points cache
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: C:/Strawberry-perl-for-GLPI-Agent_build/restore
        key: windows-packaging-restore-points-${{ matrix.arch }}-${{ hashFiles('contrib\windows\packaging\PerlBuildJob.pm') }}
    - name: List files in cached path
      if: success() || failure()
      run: |
        dir C:\Strawberry-perl-for-GLPI-Agent_build\restore
      shell: cmd
    - name: Update environment
      run: |
        echo 'C:\Strawberry\perl\bin'      >> $GITHUB_PATH
        echo 'C:\Strawberry\perl\site\bin' >> $GITHUB_PATH
        echo 'C:\Strawberry\c\bin'         >> $GITHUB_PATH
      shell: bash
    - name: Show environment
      run: |
        echo "PATH=%PATH%"
        perl --version
        perl -V
      shell: cmd
    - name: Install Module::Install
      run: cpan -T Module::Install
      shell: cmd
    - name: Prepare Makefile
      run: perl Makefile.PL
      shell: cmd
    - name: Install Perl::Dist::Strawberry
      run: |
        cpanm --notest --verbose Perl::Dist::Strawberry
      shell: cmd
    - name: Build package
      run: |
        perl contrib\windows\glpi-agent-packaging.pl --arch ${{ matrix.arch }}
      shell: cmd
    - name: List generated files
      if: success() || failure()
      run: |
        dir C:\Strawberry-perl-for-GLPI-Agent_build\output
      shell: cmd
    - name: Upload windows built artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: Windows-Build
        path: C:\Strawberry-perl-for-GLPI-Agent_build\output
    - name: Upload debug MSI-Build artifacts
      if: failure() #success() || failure() # Only enable on failure or when debugging is required
      uses: actions/upload-artifact@v2
      with:
        name: MSI-Build-Debug
        path: C:\Strawberry-perl-for-GLPI-Agent_build\build\msi
    - name: Upload Portable Archive Asset
      id: upload-portable-archive-asset
      if: ${{ needs.setup-release.outputs.create-release == 'yes' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup-release.outputs.upload_url }}
        asset_path: C:\Strawberry-perl-for-GLPI-Agent_build\output\glpi-agent-${{ needs.setup-release.outputs.version }}-${{ matrix.arch }}.zip
        asset_name: glpi-agent-${{ needs.setup-release.outputs.version }}-${{ matrix.arch }}.zip
        asset_content_type: application/zip
    - name: Upload MSI Installer Asset
      id: upload-msi-asset
      if: ${{ needs.setup-release.outputs.create-release == 'yes' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup-release.outputs.upload_url }}
        asset_path: C:\Strawberry-perl-for-GLPI-Agent_build\output\GLPI-Agent-${{ needs.setup-release.outputs.version }}-${{ matrix.arch }}.msi
        asset_name: GLPI-Agent-${{ needs.setup-release.outputs.version }}-${{ matrix.arch }}.msi
        asset_content_type: application/x-msi

  macosx-packaging:

    runs-on: macos-latest
    strategy:
      matrix:
        arch: [ x86_64, arm64 ]

    if: ${{ needs.setup-release.outputs.build == 'yes' }}
    needs: setup-release

    steps:
    - uses: actions/checkout@v2
    - name: Restore points cache
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: |
          contrib/macosx/*.gz
          contrib/macosx/*.sha1
          contrib/macosx/*.sha1.txt
          contrib/macosx/munkipkg
          contrib/macosx/build/perl*
          contrib/macosx/build/openssl*
          contrib/macosx/build/zlib*
          contrib/macosx/build/Applications
        key: macosx-packaging-restore-points-${{ matrix.arch }}-${{ hashFiles('contrib/macosx/glpi-agent-packaging.sh') }}
    - name: Build package
      run: |
        ./contrib/macosx/glpi-agent-packaging.sh --arch ${{ matrix.arch }}
      shell: bash
    - name: List generated files
      if: success() || failure()
      run: |
        ls contrib/macosx/build
      shell: bash
    - name: Upload MacOSX built artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v2
      with:
        name: MacOSX-Build
        path: |
          contrib/macosx/build/*.pkg
          contrib/macosx/build/*.dmg
    - name: Upload MacOSX PKG installer
      id: upload-macosx-pkg-asset
      if: ${{ needs.setup-release.outputs.create-release == 'yes' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup-release.outputs.upload_url }}
        asset_path: contrib/macosx/build/GLPI-Agent-${{ needs.setup-release.outputs.version }}_${{ matrix.arch }}.pkg
        asset_name: GLPI-Agent-${{ needs.setup-release.outputs.version }}_${{ matrix.arch }}.pkg
        asset_content_type: application/octet-stream
    - name: Upload MacOSX DMG installer image
      id: upload-macosx-dmg-asset
      if: ${{ needs.setup-release.outputs.create-release == 'yes' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup-release.outputs.upload_url }}
        asset_path: contrib/macosx/build/GLPI-Agent-${{ needs.setup-release.outputs.version }}_${{ matrix.arch }}.dmg
        asset_name: GLPI-Agent-${{ needs.setup-release.outputs.version }}_${{ matrix.arch }}.dmg
        asset_content_type: application/octet-stream

  linux-snap-packaging:

    runs-on: ubuntu-latest

    if: ${{ needs.setup-release.outputs.build == 'yes' }}
    needs: setup-release

    steps:
    - uses: actions/checkout@v2
    - uses: snapcore/action-build@v1
      id: snapcraft
      env:
        TERM: ${{ env.TERM }}:${{ needs.setup-release.outputs.version }}
    - name: Upload Snap built artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Snap-Build
        path: ${{ steps.snapcraft.outputs.snap }}
    - name: Upload Snap Package
      id: upload-linux-snap-asset
      if: ${{ needs.setup-release.outputs.create-release == 'yes' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup-release.outputs.upload_url }}
        asset_path: ${{ steps.snapcraft.outputs.snap }}
        asset_name: ${{ steps.snapcraft.outputs.snap }}
        asset_content_type: application/octet-stream

  linux-debian-packaging:

    runs-on: ubuntu-latest

    if: ${{ needs.setup-release.outputs.build == 'yes' }}
    needs: setup-release

    steps:
    - uses: actions/checkout@v2
    - name: Install build dependencies packages
      run: |
        sudo apt -y install dpkg-dev debhelper libmodule-install-perl      \
          libclone-perl libdigest-sha-perl libfile-copy-recursive-perl     \
          libfile-which-perl libhttp-cookies-perl libhttp-daemon-perl      \
          libhttp-proxy-perl libhttp-server-simple-perl                    \
          libhttp-server-simple-authen-perl libio-capture-perl             \
          libipc-run-perl libjson-pp-perl libnet-ip-perl                   \
          libnet-snmp-perl libio-socket-ssl-perl libparse-edid-perl        \
          libproc-daemon-perl libparallel-forkmanager-perl                 \
          libtest-compile-perl libtest-deep-perl libtest-nowarnings-perl   \
          libtest-exception-perl libtest-mockmodule-perl                   \
          libtest-mockobject-perl libtext-template-perl                    \
          libsocket-getaddrinfo-perl libuniversal-require-perl liburi-perl \
          libwww-perl libxml-treepp-perl libxml-xpath-perl libyaml-perl    \
          devscripts
      shell: bash
    - name: Build debian packages
      id: debbuild
      run: |
        echo "::set-output name=debpath:: $(dirname $PWD)"
        # make -gitXXXXXXXX release when not tagged
        if [ -z "${VERSION##*-*}" ]; then
            tools/make-release.sh --no-git $VERSION
        fi
        # DH_COMPAT is needed on current ubuntu-latest, it could be removed after switching to Ubuntu 20.04
        export DH_COMPAT=11
        dpkg-buildpackage -d -b --no-sign
      shell: bash
      env:
        VERSION: ${{ needs.setup-release.outputs.version }}
    - name: Run lintian
      run: |
        sudo apt -y install lintian
        lintian --profile debian --show-overrides -L ">=pedantic"
      shell: bash
    - name: Upload built deb artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Debian-Build
        path: |
          ${{ steps.debbuild.outputs.debpath }}/*.deb
          ${{ steps.debbuild.outputs.debpath }}/*.buildinfo
          ${{ steps.debbuild.outputs.debpath }}/*.changes
    - name: Upload Deb Packages
      id: upload-linux-deb-asset
      if: ${{ needs.setup-release.outputs.create-release == 'yes' }}
      run: |
        gh release upload ${{ needs.setup-release.outputs.tag_name }} ../*.deb
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux-rpm-packaging:

    runs-on: ubuntu-latest

    if: ${{ needs.setup-release.outputs.build == 'yes' }}
    needs: setup-release

    steps:
    - uses: actions/checkout@v2
    - name: Install build dependencies packages
      run: |
        sudo apt -y install rpm devscripts \
            libfile-which-perl libuniversal-require-perl libmodule-install-perl
      shell: bash
    - name: Build rpm packages
      id: rpmbuild
      run: |
        contrib/unix/glpi-agent-rpm-build.sh --nodeps
      shell: bash
    - name: Test rpm local install & uninstall
      run: |
        sudo rpm -ivh --nodeps ${{ steps.rpmbuild.outputs.glpi-agent-rpm }} \
            ${{ steps.rpmbuild.outputs.glpi-agent-task-network-rpm }} \
            ${{ steps.rpmbuild.outputs.glpi-agent-task-collect-rpm }} \
            ${{ steps.rpmbuild.outputs.glpi-agent-task-deploy-rpm }} \
            ${{ steps.rpmbuild.outputs.glpi-agent-task-wakeonlan-rpm }} \
            ${{ steps.rpmbuild.outputs.glpi-agent-task-esx-rpm }} \
            ${{ steps.rpmbuild.outputs.glpi-agent-cron-rpm }}
        sudo rpm -e glpi-agent glpi-agent-task-network glpi-agent-task-collect \
            glpi-agent-task-deploy glpi-agent-task-wakeonlan \
            glpi-agent-task-esx glpi-agent-cron
      shell: bash
    - name: Upload built rpm artifacts
      uses: actions/upload-artifact@v2
      with:
        name: RPM-Build
        path: |
          ${{ steps.rpmbuild.outputs.rpmdir }}/noarch/*.rpm
    - name: Upload rpm sources artifacts
      uses: actions/upload-artifact@v2
      with:
        name: RPM-Sources
        path: |
          ${{ steps.rpmbuild.outputs.srpmdir }}/*.rpm
          ${{ steps.rpmbuild.outputs.srcdir }}/glpi-agent-*.tar.gz
    - name: Upload RPM Packages
      id: upload-linux-rpm-asset
      if: ${{ needs.setup-release.outputs.create-release == 'yes' }}
      run: |
        RPMDIR=`rpm --eval "%{_rpmdir}"`
        gh release upload ${{ needs.setup-release.outputs.tag_name }} $RPMDIR/*/*.rpm
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux-installer:

    runs-on: ubuntu-latest

    if: ${{ needs.setup-release.outputs.build == 'yes' }}
    needs: [ setup-release, linux-snap-packaging, linux-debian-packaging, linux-rpm-packaging ]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: RPM-Build
    - uses: actions/download-artifact@v2
      with:
        name: Debian-Build
    - uses: actions/download-artifact@v2
      with:
        name: Snap-Build
    - name: Build installer
      id: installer-build
      run: |
        contrib/unix/make-linux-installer.sh --version $VERSION --rpm *.rpm \
            --deb *.deb --snap *.snap
        mv glpi-agent-$VERSION-linux-installer.pl glpi-agent-$VERSION-with-snap-linux-installer.pl
        contrib/unix/make-linux-installer.sh --version $VERSION --rpm *.rpm --deb *.deb
        ls -l
        sha1sum *.rpm *.deb *.snap *.pl
        sha256sum *.rpm *.deb *.snap *.pl
      shell: bash
      env:
        VERSION: ${{ needs.setup-release.outputs.version }}
    - name: Upload built installer artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Linux-Installer-Build
        path: |
          glpi-agent-*-linux-installer.pl
    - name: Upload linux installers
      id: upload-linux-installer-assets
      if: ${{ needs.setup-release.outputs.create-release == 'yes' }}
      run: |
        gh release upload ${{ needs.setup-release.outputs.tag_name }} glpi-agent-*-linux-installer.pl
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:

    runs-on: ubuntu-latest

    if: ${{ needs.setup-release.outputs.create-release == 'yes' }}
    needs: [ setup-release, windows-packaging, macosx-packaging, linux-snap-packaging, linux-debian-packaging, linux-rpm-packaging, linux-installer ]

    steps:
    - uses: actions/checkout@v2
    - name: Publish release
      id: publish-release
      run: |
        gh api /repos/{owner}/{repo}/releases/${{ needs.setup-release.outputs.releaseid }} \
            --method PATCH --field draft=false --jq '{id: .id, name: .name, tag_name: .tag_name, target_commitish: .target_commitish, draft: .draft, prerelease: .prerelease, body: .body}'
        # Only keep a given number of development or nightly releases
        case "${{ needs.setup-release.outputs.tag_name }}" in
            development-release-*)
                let COUNT=${{ env.number_of_development_build_to_keep }}
                TYPE=development
                ;;
            nightly-release-*)
                let COUNT=${{ env.number_of_nightly_build_to_keep }}
                TYPE=nightly
                ;;
            *)
                let COUNT=0
                ;;
        esac
        gh api /repos/{owner}/{repo}/releases --jq '.[].id' | \
        while read id
        do
            set x $(gh api /repos/{owner}/{repo}/releases/$id --jq '.draft,.tag_name,.name')
            shift
            DRAFT="$1"
            shift
            TAG="$1"
            [ -n "$TAG" -a -z "${TAG%$TYPE-release*}" ] || continue
            shift
            if (( COUNT-- > 0 )); then
                echo "Keeping $* $TYPE release ($TAG)"
            else
                echo "Removing $* $TYPE release ($TAG)"
                gh api /repos/{owner}/{repo}/releases/$id --method DELETE
                if [ "$DRAFT" != "true" ]; then
                    echo "Removing $TAG tag"
                    gh api /repos/{owner}/{repo}/git/refs/tags/$TAG --method DELETE
                fi
            fi
        done
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-nightly:

    runs-on: ubuntu-latest

    if: ${{ needs.setup-release.outputs.create-release == 'no' }}
    #if: ${{ needs.setup-release.outputs.create-release == 'no' && startsWith(needs.setup-release.outputs.tag_name, 'nightly') }}
    needs: [ setup-release, windows-packaging, macosx-packaging, linux-snap-packaging, linux-debian-packaging, linux-rpm-packaging, linux-installer ]

    steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{ github.repository_owner }}/glpi-project.github.io
        token: ${{ secrets.PUBLISHING_TOKEN }}
        fetch-depth: 0
    - uses: actions/download-artifact@v2
      with:
        name: Linux-Installer-Build
        path: glpi-agent
    - uses: actions/download-artifact@v2
      with:
        name: RPM-Build
        path: glpi-agent
    - uses: actions/download-artifact@v2
      with:
        name: Debian-Build
        path: glpi-agent
    - uses: actions/download-artifact@v2
      with:
        name: Snap-Build
        path: glpi-agent
    - uses: actions/download-artifact@v2
      with:
        name: MacOSX-Build
        path: glpi-agent
    - uses: actions/download-artifact@v2
      with:
        name: Windows-Build
        path: glpi-agent
    - name: Cleanup nightly
      run: |
        # Clean up Debian-Build
        rm -f glpi-agent/*.buildinfo glpi-agent/*.changes
        # Clean up Windows-Build
        rm -f glpi-agent/*_debug_dir.zip
        ls -lt glpi-agent
      shell: bash
    - name: Publish nightly
      id: publish-nightly
      run: |
        # Only keep a given number of nightly releases
        TAGNAME="${{ needs.setup-release.outputs.tag_name }}"
        [ -z "$TAGNAME" ] && TAGNAME="development-release-$(date +%F-%H-%M-%S)"
        case "$TAGNAME" in
            development-release-*)
                let COUNT=${{ env.number_of_development_build_to_keep }}
                ;;
            nightly-release-*)
                let COUNT=${{ env.number_of_nightly_build_to_keep }}
                ;;
            *)
                let COUNT=1
                ;;
        esac
        git config --local user.email "$(git log --format='%ae' HEAD^!)"
        git config --local user.name "$(git log --format='%an' HEAD^!)"
        git fetch --tags
        git tag -l | \
        while read TAG
        do
            case "$TAG" in
                glpi-agent-*)
                    if (( --COUNT > 0 )); then
                        echo "Keeping glpi-agent build ($TAG)"
                        continue
                    fi
                    ;;
                *)
                    continue
                    ;;
            esac
            set x $(gh api /repos/{owner}/{repo}/git/$ref --jq '.object.sha')
            shift
            SHA="$1"
            echo "Removing glpi-agent build ($TAG)"
            # First delete tag here and remotely
            gh api /repos/{owner}/{repo}/git/refs/tags/$TAG --method DELETE
            git tag -d $TAG
            # Rebase repository and mark old commit to be dropped
            git rebase --root -x false || true
            grep -v 'exec false' .git/rebase-merge/git-rebase-todo | \
            sed -e "s/pick $SHA/drop $SHA/" >.git/rebase-merge/git-rebase-todo.fixed
            mv -vf .git/rebase-merge/git-rebase-todo{.fixed,}
            git rebase --continue
        done
        ls -lt glpi-agent
        # Prepare commit
        git add glpi-agent/*
        git commit -m "Add GLPI-Agent ${{ needs.setup-release.outputs.version }} build"
        git tag glpi-agent-$TAGNAME
        # Now generate glpi-agent data file
        for file in $( ls -t glpi-agent/* )
        do
            FILE="${file#glpi-agent/}"
            if [ "$FILE" != "index.html" ]; then
                DATE=$( date -u +"%F %H:%M:%S UTC" -r "$file" )
                SIZE=$( stat -c %s "$file" )
                echo "- name: $FILE"
                echo "  size: $SIZE"
                set x $(git log -n1 --pretty=%ci -- $file)
                echo "  date: $2 $3 UTC"
                case "$FILE" in
                    *.rpm)
                        echo "  type: rpm"
                        ;;
                    *.deb)
                        echo "  type: deb"
                        ;;
                    *.pkg|*.dmg)
                        echo "  type: macosx"
                        ;;
                    *.zip|*.msi)
                        echo "  type: win32"
                        ;;
                    *.pl|*.snap)
                        echo "  type: linux"
                        ;;
                    *)
                        echo "  type: n/a"
                        ;;
                esac
            fi
        done >_data/glpi-agent.yml
        git add _data/glpi-agent.yml
        git commit -m "glpi-agent index datas update"
        # Force commit
        git push --force
        git push --tags
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLISHING_TOKEN }}
